#!/usr/bin/env python
# -*- coding:utf-8 -*-
############################################################################
#  
#    Author: waterpku
#    Date:   2015-5-23
#
############################################################################

from functools import wraps
from wtforms import ( Form, Field, TextField, FileField,HiddenField,
                            TextAreaField, RadioField, 
                            SubmitField, SelectMultipleField,
                            IntegerField, FormField, FieldList,
                            SelectField, PasswordField, FloatField,
                            DateTimeField)
from wtforms import StringField as BugStringField
from wtforms import BooleanField as BugBooleanField
from wtforms.widgets import TextInput
from wtforms import validators, ValidationError

from urlparse import urlparse, urljoin
from flask import current_app, request, url_for, redirect, g
try:
    import simplejson as json
except:
    import json
from cm_web.helper import helper

class StringField(BugStringField):
    '重载去除原WTF的BUG, 不能使用default的值的BUG'
    def process_formdata(self, valuelist):
        if valuelist:
            self.data = valuelist[0]
        else:
            self.data = self.data or ''

class BooleanField(BugBooleanField):
    false_values = ('false', 'False', '')

class ValidID(object):
    """
    validate all the IDs generated by dcid
    """
    def __init__(self, message=None):
        self.message = message

    def __call__(self, form, field):
        data = field.data
        if data is not None and (not helper.is_valid_id(data)):
            message = self.message
            if message is None:
                message = u'无效的ID'
            raise ValidationError(message)

# weizheng 201506
class ValidUserID(object):
    """
    validate user id
    """
    def __init__(self, message=None):
        self.message = message

    def __call__(self, form, field):
        data = field.data
        if data is not None and (not helper.is_valid_id(data)):
            message = self.message
            if message is None:
                message = u'无效的ID'
            raise ValidationError(message)
        if data is not None and (not uhd.check_id_exist(data)):
            message = self.message
            if message is None:
                message = u'ID不存在'
            raise ValidationError(message)

class ValidBirthStr(object):
    """
    validate all the Birth Str
    """
    def __init__(self, message=None):
        self.message = message

    def __call__(self, form, field):
        data = field.data
        if data is not None or len(data) != 8:
            if not str(data).isdigit():
                message = self.message
                if message is None:
                    message = u'Invalid birth'
                raise ValidationError(message)
            year = int(data[0:4])
            month = int(data[4:6])
            day = int(data[6:8])
            if year < 0 or month < 0 or month > 12 or day < 0 or day > 31:
                message = self.message
                if message is None:
                    message = u'Invalid birth'
                raise ValidationError(message)

class ValidAge(object):
    """
    validate all the Age Str
    """
    def __init__(self, message=None):
        self.message = message

    def __call__(self, form, field):
        data = field.data
        if data is not None:
            if not str(data).isdigit():
                message = self.message
                if message is None:
                    message = u'Invalid age'
                raise ValidationError(message)
            year = int(data)
            if year < 0:
                message = self.message
                if message is None:
                    message = u'Invalid age'
                raise ValidationError(message)

class ValidPhone(object):
    """
    validate all the Phone Str
    """
    def __init__(self, message=None):
        self.message = message

    def __call__(self, form, field):
        data = field.data
        if data is not None:
            if not str(data).isdigit():
                message = self.message
                if message is None:
                    message = u'Invalid phone number'
                raise ValidationError(message)

class ValidImage(validators.URL):
    """
    专门用来验证 duoc 的image url，如是带尺寸规格的又拍云图片，将后面的规格参数扔掉
    """
    def __init__(self, required_tld=True, message=None):

        super(ValidImage, self).__init__(required_tld, message)
        self.message = message or u'不是合法的图片URL'

    def __call__(self, form, field):
        if not field.data:
            return
        field.data = current_app.oss.strip_url_suffix(field.data)
        super(ValidImage, self).__call__(form, field)
        field.data = current_app.oss.strip_url_prefix(field.data)

class ValidImage2(validators.URL):
    """
    专门用来验证 duoc 的用户头像image url，如果不是合法的url，改为默认头像
    """
    def __init__(self, required_tld=True, message=None):

        super(ValidImage2, self).__init__(required_tld, message)
        self.message = message or u'不是合法的图片URL'

    def __call__(self, form, field):
        if not field.data:
            return
        field.data = current_app.oss.strip_url_suffix(field.data)
        try:
            super(ValidImage2, self).__call__(form, field)
        except ValidationError:
            field.data = '/static/img/placeholder_user@2x.png'
        field.data = current_app.oss.strip_url_prefix(field.data)
        
class ValidVideo(validators.URL):
    """
    专门用来验证 duoc 的video url，如是带规格参数的又拍云视频，将后面的规格参数扔掉
    """
    def __init__(self, required_tld=True, message=None):
        super(ValidVideo, self).__init__(required_tld, message)
        self.message = message or u'不是合法的图片URL'

    def __call__(self, form, field):
        if not field.data:
            return
        field.data = current_app.filemod.strip_url_suffix(field.data)
        super(ValidVideo, self).__call__(form, field)
        field.data = current_app.filemod.strip_url_prefix(field.data)

#带跳转的form的辅助函数
def is_safe_url(target):
    ref_url = urlparse(request.host_url)
    test_url = urlparse(urljoin(request.host_url, target))
    return test_url.scheme in ('http', 'https') and \
           ref_url.netloc == test_url.netloc


def get_redirect_target():
    for target in request.args.get('next'), request.referrer:
        if not target:
            continue
        if is_safe_url(target):
            return target


#带跳转的form基类，凡是需要跳转的
class RedirectForm(Form):
    next = HiddenField()

    def __init__(self, *args, **kwargs):
        Form.__init__(self, *args, **kwargs)
        if not self.next.data:
            self.next.data = get_redirect_target() or ''


    def redirect_url(self):
        if is_safe_url(self.next.data):
            return self.next.data
        target = get_redirect_target()
        return target


    def redirect(self, endpoint='index', **values):
        target = self.redirect_url()
        return redirect(target or url_for(endpoint, **values))


class CMForm( RedirectForm ):
    def __init__(self, *args, **kwargs):
        kwargs['csrf_enabled'] = False
        super(CMForm, self).__init__(*args, **kwargs)

class ListForm( CMForm ):
    start_index = IntegerField(u'start_index', default=1)
    count = IntegerField(u'count', default=10)

class JsonDictField(Field):
    """json字典的字段，实现python dict和json string的自动转换"""
    widget = TextInput()

    def _value(self):
        if self.data:
            return json.dumps(self.data)
        else:
            return u""

    def process_formdata(self, jsonstr):
        jsonstr = jsonstr[-1] if len(jsonstr) > 0 else None
        try:
            if jsonstr:
                self.data = json.loads(jsonstr)
            else:
                self.data = None
        except: 
            raise ValidationError(u"json解析出错")

def validate_form( form_cls ):
    def deco( f ):
        @wraps(f)
        def validate( *args, **kwargs ):
            if request.method == 'POST':
                wait_form = request.form
            elif request.method == 'GET':
                wait_form = request.args
            else:
                raise CMException(info=u'不支持的HTTP方法%s' % request.method)

            form = form_cls( wait_form )
            if form.validate():
                #验证过的form放在g中，方便f中访问
                g.form = form 
                return f( *args, **kwargs )
            else:
                info = json.dumps(form.errors, encoding='utf-8', ensure_ascii=False)
                raise CMException(info=info, error_code='E_INVALID_PARAM')
        return validate
    return deco

